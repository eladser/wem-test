using Microsoft.EntityFrameworkCore;\nusing WemDashboard.Domain.Entities;\nusing WemDashboard.Infrastructure.Data;\n\nnamespace WemDashboard.Infrastructure.Services;\n\npublic class DataSeeder\n{\n    private readonly WemDashboardDbContext _context;\n\n    public DataSeeder(WemDashboardDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task SeedAsync()\n    {\n        await SeedUsersAsync();\n        await SeedSitesAsync();\n        await SeedAssetsAsync();\n        await SeedPowerDataAsync();\n        await SeedAlertsAsync();\n        await _context.SaveChangesAsync();\n    }\n\n    private async Task SeedUsersAsync()\n    {\n        if (await _context.Users.AnyAsync())\n            return;\n\n        var users = new List<User>\n        {\n            new()\n            {\n                Id = \"admin-001\",\n                Email = \"admin@wemdashboard.com\",\n                PasswordHash = BCrypt.Net.BCrypt.HashPassword(\"Admin123!\"),\n                FirstName = \"System\",\n                LastName = \"Administrator\",\n                Role = UserRole.Admin,\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-30),\n                UpdatedAt = DateTime.UtcNow,\n                LastLogin = DateTime.UtcNow\n            },\n            new()\n            {\n                Id = \"manager-001\",\n                Email = \"manager@wemdashboard.com\",\n                PasswordHash = BCrypt.Net.BCrypt.HashPassword(\"Manager123!\"),\n                FirstName = \"Sarah\",\n                LastName = \"Johnson\",\n                Role = UserRole.Manager,\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-25),\n                UpdatedAt = DateTime.UtcNow,\n                LastLogin = DateTime.UtcNow.AddHours(-2)\n            },\n            new()\n            {\n                Id = \"operator-001\",\n                Email = \"operator@wemdashboard.com\",\n                PasswordHash = BCrypt.Net.BCrypt.HashPassword(\"Operator123!\"),\n                FirstName = \"Mike\",\n                LastName = \"Chen\",\n                Role = UserRole.Operator,\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-20),\n                UpdatedAt = DateTime.UtcNow,\n                LastLogin = DateTime.UtcNow.AddMinutes(-15)\n            },\n            new()\n            {\n                Id = \"viewer-001\",\n                Email = \"viewer@wemdashboard.com\",\n                PasswordHash = BCrypt.Net.BCrypt.HashPassword(\"Viewer123!\"),\n                FirstName = \"Lisa\",\n                LastName = \"Rodriguez\",\n                Role = UserRole.Viewer,\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-15),\n                UpdatedAt = DateTime.UtcNow,\n                LastLogin = DateTime.UtcNow.AddMinutes(-5)\n            },\n            new()\n            {\n                Id = \"demo-user\",\n                Email = \"demo@wemdashboard.com\",\n                PasswordHash = BCrypt.Net.BCrypt.HashPassword(\"Demo123!\"),\n                FirstName = \"Demo\",\n                LastName = \"User\",\n                Role = UserRole.Viewer,\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-10),\n                UpdatedAt = DateTime.UtcNow,\n                LastLogin = DateTime.UtcNow.AddMinutes(-1)\n            }\n        };\n\n        await _context.Users.AddRangeAsync(users);\n    }\n\n    private async Task SeedSitesAsync()\n    {\n        if (await _context.Sites.AnyAsync())\n            return;\n\n        var sites = new List<Site>\n        {\n            new()\n            {\n                Id = \"site-ca-001\",\n                Name = \"California Solar Farm Alpha\",\n                Location = \"Riverside County, California, USA\",\n                Region = \"north-america\",\n                Status = SiteStatus.Online,\n                TotalCapacity = 45.8,\n                CurrentOutput = 38.2,\n                Efficiency = 96.5,\n                CreatedAt = DateTime.UtcNow.AddDays(-180),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-2),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-2)\n            },\n            new()\n            {\n                Id = \"site-tx-001\",\n                Name = \"Texas Wind & Solar Complex\",\n                Location = \"West Texas, USA\",\n                Region = \"north-america\",\n                Status = SiteStatus.Online,\n                TotalCapacity = 62.3,\n                CurrentOutput = 51.7,\n                Efficiency = 94.2,\n                CreatedAt = DateTime.UtcNow.AddDays(-150),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-1),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-1)\n            },\n            new()\n            {\n                Id = \"site-de-001\",\n                Name = \"Berlin Green Energy Hub\",\n                Location = \"Brandenburg, Germany\",\n                Region = \"europe\",\n                Status = SiteStatus.Maintenance,\n                TotalCapacity = 28.4,\n                CurrentOutput = 8.1,\n                Efficiency = 28.5,\n                CreatedAt = DateTime.UtcNow.AddDays(-120),\n                UpdatedAt = DateTime.UtcNow.AddHours(-3),\n                LastUpdate = DateTime.UtcNow.AddHours(-3)\n            },\n            new()\n            {\n                Id = \"site-jp-001\",\n                Name = \"Tokyo Bay Offshore Wind\",\n                Location = \"Tokyo Bay, Japan\",\n                Region = \"asia-pacific\",\n                Status = SiteStatus.Online,\n                TotalCapacity = 78.9,\n                CurrentOutput = 72.1,\n                Efficiency = 98.7,\n                CreatedAt = DateTime.UtcNow.AddDays(-90),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-30),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-30)\n            },\n            new()\n            {\n                Id = \"site-au-001\",\n                Name = \"Australian Outback Solar\",\n                Location = \"Northern Territory, Australia\",\n                Region = \"asia-pacific\",\n                Status = SiteStatus.Online,\n                TotalCapacity = 35.2,\n                CurrentOutput = 29.8,\n                Efficiency = 92.1,\n                CreatedAt = DateTime.UtcNow.AddDays(-60),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-5),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-5)\n            },\n            new()\n            {\n                Id = \"site-uk-001\",\n                Name = \"Scottish Highlands Wind Farm\",\n                Location = \"Highlands, Scotland, UK\",\n                Region = \"europe\",\n                Status = SiteStatus.Online,\n                TotalCapacity = 42.6,\n                CurrentOutput = 38.9,\n                Efficiency = 91.3,\n                CreatedAt = DateTime.UtcNow.AddDays(-45),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-10),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-10)\n            }\n        };\n\n        await _context.Sites.AddRangeAsync(sites);\n    }\n\n    private async Task SeedAssetsAsync()\n    {\n        if (await _context.Assets.AnyAsync())\n            return;\n\n        var assets = new List<Asset>\n        {\n            // California Solar Farm Alpha\n            new()\n            {\n                Id = \"INV-CA-001\",\n                Name = \"Solar Inverter Unit 1\",\n                Type = AssetType.Inverter,\n                SiteId = \"site-ca-001\",\n                Status = AssetStatus.Online,\n                Power = \"15.2 kW\",\n                Efficiency = \"96.5%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-180),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-2),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-2)\n            },\n            new()\n            {\n                Id = \"BAT-CA-001\",\n                Name = \"Battery Storage System A\",\n                Type = AssetType.Battery,\n                SiteId = \"site-ca-001\",\n                Status = AssetStatus.Charging,\n                Power = \"15.4 kW\",\n                Efficiency = \"94.2%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-180),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-2),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-2)\n            },\n            // Texas Wind & Solar Complex\n            new()\n            {\n                Id = \"WIND-TX-001\",\n                Name = \"Wind Turbine Generator 1\",\n                Type = AssetType.WindTurbine,\n                SiteId = \"site-tx-001\",\n                Status = AssetStatus.Online,\n                Power = \"25.8 kW\",\n                Efficiency = \"94.2%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-150),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-1),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-1)\n            },\n            new()\n            {\n                Id = \"SOLAR-TX-001\",\n                Name = \"Solar Panel Array TX-1\",\n                Type = AssetType.SolarPanel,\n                SiteId = \"site-tx-001\",\n                Status = AssetStatus.Online,\n                Power = \"10.7 kW\",\n                Efficiency = \"95.1%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-150),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-1),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-1)\n            },\n            // Berlin Green Energy Hub\n            new()\n            {\n                Id = \"INV-DE-001\",\n                Name = \"Inverter Unit Berlin-1\",\n                Type = AssetType.Inverter,\n                SiteId = \"site-de-001\",\n                Status = AssetStatus.Maintenance,\n                Power = \"0 kW\",\n                Efficiency = \"0%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-120),\n                UpdatedAt = DateTime.UtcNow.AddHours(-3),\n                LastUpdate = DateTime.UtcNow.AddHours(-3)\n            },\n            // Tokyo Bay Offshore Wind\n            new()\n            {\n                Id = \"WIND-JP-001\",\n                Name = \"Offshore Wind Turbine JP-1\",\n                Type = AssetType.WindTurbine,\n                SiteId = \"site-jp-001\",\n                Status = AssetStatus.Online,\n                Power = \"35.2 kW\",\n                Efficiency = \"98.7%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-90),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-30),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-30)\n            },\n            new()\n            {\n                Id = \"WIND-JP-002\",\n                Name = \"Offshore Wind Turbine JP-2\",\n                Type = AssetType.WindTurbine,\n                SiteId = \"site-jp-001\",\n                Status = AssetStatus.Online,\n                Power = \"36.9 kW\",\n                Efficiency = \"98.5%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-90),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-30),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-30)\n            },\n            // Australian Outback Solar\n            new()\n            {\n                Id = \"SOLAR-AU-001\",\n                Name = \"Outback Solar Array AU-1\",\n                Type = AssetType.SolarPanel,\n                SiteId = \"site-au-001\",\n                Status = AssetStatus.Online,\n                Power = \"29.8 kW\",\n                Efficiency = \"92.1%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-60),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-5),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-5)\n            },\n            // Scottish Highlands Wind Farm\n            new()\n            {\n                Id = \"WIND-UK-001\",\n                Name = \"Highland Wind Turbine UK-1\",\n                Type = AssetType.WindTurbine,\n                SiteId = \"site-uk-001\",\n                Status = AssetStatus.Online,\n                Power = \"38.9 kW\",\n                Efficiency = \"91.3%\",\n                CreatedAt = DateTime.UtcNow.AddDays(-45),\n                UpdatedAt = DateTime.UtcNow.AddMinutes(-10),\n                LastUpdate = DateTime.UtcNow.AddMinutes(-10)\n            }\n        };\n\n        await _context.Assets.AddRangeAsync(assets);\n    }\n\n    private async Task SeedPowerDataAsync()\n    {\n        if (await _context.PowerData.AnyAsync())\n            return;\n\n        var sites = new[] { \"site-ca-001\", \"site-tx-001\", \"site-de-001\", \"site-jp-001\", \"site-au-001\", \"site-uk-001\" };\n        var powerDataList = new List<PowerData>();\n        var random = new Random(42); // Fixed seed for consistent data\n\n        foreach (var siteId in sites)\n        {\n            // Generate 7 days of hourly data (168 hours)\n            for (int day = 0; day < 7; day++)\n            {\n                for (int hour = 0; hour < 24; hour++)\n                {\n                    var timestamp = DateTime.UtcNow.AddDays(-day).Date.AddHours(hour);\n                    \n                    // Different patterns for different sites\n                    var (solar, battery, grid, demand, wind) = GeneratePowerDataForSite(siteId, hour, day, random);\n                    \n                    powerDataList.Add(new PowerData\n                    {\n                        SiteId = siteId,\n                        Time = timestamp,\n                        Solar = solar,\n                        Battery = battery,\n                        Grid = grid,\n                        Demand = demand,\n                        Wind = wind,\n                        CreatedAt = timestamp.AddMinutes(random.Next(0, 60))\n                    });\n                }\n            }\n        }\n\n        await _context.PowerData.AddRangeAsync(powerDataList);\n    }\n\n    private static (double solar, double battery, double grid, double demand, double? wind) GeneratePowerDataForSite(\n        string siteId, int hour, int day, Random random)\n    {\n        double solar = 0, battery = 0, grid = 0, demand = 0, wind = 0;\n        \n        // Base demand pattern (higher during day, lower at night)\n        var baseDemand = 20 + (Math.Sin((hour - 6) * Math.PI / 12) * 15);\n        if (baseDemand < 5) baseDemand = 5;\n        \n        // Add some randomness\n        var variance = random.NextDouble() * 0.3 + 0.85; // 0.85 to 1.15 multiplier\n        \n        switch (siteId)\n        {\n            case \"site-ca-001\": // California Solar Farm\n                solar = hour >= 6 && hour <= 18 ? (30 + Math.Sin((hour - 6) * Math.PI / 12) * 25) * variance : 0;\n                battery = 15 + random.NextDouble() * 10;\n                demand = baseDemand * 1.2 * variance;\n                grid = Math.Max(0, demand - solar - battery);\n                break;\n                \n            case \"site-tx-001\": // Texas Wind & Solar\n                solar = hour >= 6 && hour <= 18 ? (25 + Math.Sin((hour - 6) * Math.PI / 12) * 20) * variance : 0;\n                wind = 15 + random.NextDouble() * 30; // Wind is more variable\n                battery = 12 + random.NextDouble() * 8;\n                demand = baseDemand * 1.5 * variance;\n                grid = Math.Max(0, demand - solar - wind - battery);\n                break;\n                \n            case \"site-de-001\": // Berlin (Maintenance)\n                solar = hour >= 7 && hour <= 17 ? (5 + Math.Sin((hour - 7) * Math.PI / 10) * 8) * variance : 0;\n                battery = 3 + random.NextDouble() * 5;\n                demand = baseDemand * 0.8 * variance;\n                grid = Math.Max(0, demand - solar - battery);\n                break;\n                \n            case \"site-jp-001\": // Tokyo Bay Wind\n                wind = 25 + Math.Sin(hour * Math.PI / 12) * 20 + random.NextDouble() * 15;\n                battery = 18 + random.NextDouble() * 12;\n                demand = baseDemand * 1.8 * variance;\n                grid = Math.Max(0, demand - wind - battery);\n                break;\n                \n            case \"site-au-001\": // Australian Solar\n                solar = hour >= 5 && hour <= 19 ? (35 + Math.Sin((hour - 5) * Math.PI / 14) * 30) * variance : 0;\n                battery = 20 + random.NextDouble() * 15;\n                demand = baseDemand * 1.1 * variance;\n                grid = Math.Max(0, demand - solar - battery);\n                break;\n                \n            case \"site-uk-001\": // Scottish Wind\n                wind = 20 + Math.Sin((hour + 3) * Math.PI / 12) * 15 + random.NextDouble() * 12;\n                battery = 16 + random.NextDouble() * 10;\n                demand = baseDemand * 1.3 * variance;\n                grid = Math.Max(0, demand - wind - battery);\n                break;\n        }\n        \n        return (Math.Round(solar, 1), Math.Round(battery, 1), Math.Round(grid, 1), \n                Math.Round(demand, 1), wind > 0 ? Math.Round(wind, 1) : null);\n    }\n\n    private async Task SeedAlertsAsync()\n    {\n        if (await _context.Alerts.AnyAsync())\n            return;\n\n        var alerts = new List<Alert>\n        {\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Success,\n                Message = \"Tokyo Bay Wind Farm achieved 98.7% efficiency - new record!\",\n                SiteId = \"site-jp-001\",\n                Timestamp = DateTime.UtcNow.AddMinutes(-5),\n                IsRead = false,\n                CreatedAt = DateTime.UtcNow.AddMinutes(-5)\n            },\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Warning,\n                Message = \"Battery storage level at California Solar Farm below 30%\",\n                SiteId = \"site-ca-001\",\n                Timestamp = DateTime.UtcNow.AddMinutes(-15),\n                IsRead = false,\n                CreatedAt = DateTime.UtcNow.AddMinutes(-15)\n            },\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Error,\n                Message = \"Berlin Green Energy Hub - Inverter Unit requires immediate maintenance\",\n                SiteId = \"site-de-001\",\n                Timestamp = DateTime.UtcNow.AddHours(-3),\n                IsRead = false,\n                CreatedAt = DateTime.UtcNow.AddHours(-3)\n            },\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Info,\n                Message = \"Scheduled maintenance completed successfully at Scottish Highlands Wind Farm\",\n                SiteId = \"site-uk-001\",\n                Timestamp = DateTime.UtcNow.AddHours(-6),\n                IsRead = true,\n                CreatedAt = DateTime.UtcNow.AddHours(-6)\n            },\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Warning,\n                Message = \"Australian Outback Solar - Dust accumulation detected on solar panels\",\n                SiteId = \"site-au-001\",\n                Timestamp = DateTime.UtcNow.AddHours(-12),\n                IsRead = false,\n                CreatedAt = DateTime.UtcNow.AddHours(-12)\n            },\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Success,\n                Message = \"Texas Wind & Solar Complex exceeded daily energy target by 15%\",\n                SiteId = \"site-tx-001\",\n                Timestamp = DateTime.UtcNow.AddDays(-1),\n                IsRead = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-1)\n            },\n            new()\n            {\n                Id = Guid.NewGuid().ToString(),\n                Type = AlertType.Info,\n                Message = \"System update completed - all sites now running latest firmware\",\n                SiteId = \"site-ca-001\",\n                Timestamp = DateTime.UtcNow.AddDays(-2),\n                IsRead = true,\n                CreatedAt = DateTime.UtcNow.AddDays(-2)\n            }\n        };\n\n        await _context.Alerts.AddRangeAsync(alerts);\n    }\n}\n"